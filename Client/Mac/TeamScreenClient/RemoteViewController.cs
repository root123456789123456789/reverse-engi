// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using Network.Thread;
using Messages.Connection;
using Messages.EventArgs.Network;
using System.IO;

namespace TeamScreenClient
{
	public partial class RemoteViewController : NSViewController
	{
		public ClientThread Manager;
		//System.Drawing.Rectangle Bounds;
		float Ratio;
		public String SystemId { get; set; }
		String Password { get; set; }

		protected Utils.Config.Manager ConfigManager;

		public RemoteViewController(IntPtr handle) : base(handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();
			Manager.Events.OnScreenshotReceived += OnScreenshotReceive;

			Manager.Manager.sendMessage(new StartScreenSharingMessage { SymmetricKey = Manager.Manager.getSymmetricKeyForRemoteId(this.SystemId), HostSystemId = this.SystemId, ClientSystemId = Manager.Manager.SystemId });

		}

		public override void ViewWillDisappear()
		{
			base.ViewWillDisappear();
			Manager.Events.OnScreenshotReceived -= OnScreenshotReceive;

			Manager.Manager.sendMessage(new StopScreenSharingMessage { SymmetricKey = Manager.Manager.getSymmetricKeyForRemoteId(this.SystemId), HostSystemId = this.SystemId, ClientSystemId = Manager.Manager.SystemId });
		}

		public void setManager(ClientThread manager)
		{
			this.Manager = manager;
		}

		protected void drawImage(NSImage Image)
		{
			this.imageView.InvokeOnMainThread(() =>
			{
				this.imageView.Image = Image;
			});
		}

		protected void OnScreenshotReceive(object sender, ScreenshotReceivedEventArgs e)
		{
			if (e.Fullscreen)
			{
				//Bounds = e.Bounds;
			}

			//Ratio = (float)this.imageView.Bounds.Width / (float)Bounds.Width;

			/*if (this.imageView.InvokeRequired)
			{
				SetDrawingAreaHeightCallback d = new SetDrawingAreaHeightCallback(setDrawingAreaHeight);
				this.Invoke(d, new object[] { (int)((float)Bounds.Height * Ratio) });
			}
			else
			{
				setDrawingAreaHeight((int)((float)Bounds.Height * Ratio));
			}*/

			if (e.Nothing)
			{
				return;
			}

			if (e.SystemId == this.SystemId)
			{
				using (var stream = new MemoryStream(e.Image))
				{
					NSImage image = NSImage.FromStream(stream);

					drawImage(image);

				}
			}
		}
	}
}
